// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TerrariumApi.DataAccess;

namespace TerrariumApi.Migrations
{
    [DbContext(typeof(TerrariumDbContext))]
    partial class TerrariumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("TerrariumApi.Models.CarbonDioxideLevelRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TerrariumDataId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("TerrariumDataId");

                    b.ToTable("CarbonDioxideLevelRecords");
                });

            modelBuilder.Entity("TerrariumApi.Models.HumidityLevelRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TerrariumDataId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("TerrariumDataId");

                    b.ToTable("HumidityLevelRecords");
                });

            modelBuilder.Entity("TerrariumApi.Models.NaturalLightLevelRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TerrariumDataId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("TerrariumDataId");

                    b.ToTable("NaturalLightLevelRecords");
                });

            modelBuilder.Entity("TerrariumApi.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCo2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHumid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTemp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCo2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinHumid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinTemp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TerrariumId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TerrariumId");

                    b.ToTable("ProfileSet");
                });

            modelBuilder.Entity("TerrariumApi.Models.ScheduledTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TerrariumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ToggleLight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ToggleVent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TerrariumId");

                    b.ToTable("ScheduledTasksSet");
                });

            modelBuilder.Entity("TerrariumApi.Models.TemperatureRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TerrariumDataId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("TerrariumDataId");

                    b.ToTable("TemperatureRecords");
                });

            modelBuilder.Entity("TerrariumApi.Models.Terrarium", b =>
                {
                    b.Property<int>("TerrariumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnimalName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TerrariumDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TerrariumName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TerrariumId");

                    b.HasIndex("TerrariumDataId");

                    b.ToTable("TerrariumSet");
                });

            modelBuilder.Entity("TerrariumApi.Models.TerrariumData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CarbonDioxideLevel")
                        .HasColumnType("REAL");

                    b.Property<double>("HumidityLevel")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsArtificialLightOn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVentOn")
                        .HasColumnType("INTEGER");

                    b.Property<double>("NaturalLightLevel")
                        .HasColumnType("REAL");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TerrariumDataSet");
                });

            modelBuilder.Entity("TerrariumApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TerrariumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TerrariumId");

                    b.ToTable("UserSet");
                });

            modelBuilder.Entity("TerrariumApi.Models.CarbonDioxideLevelRecord", b =>
                {
                    b.HasOne("TerrariumApi.Models.TerrariumData", null)
                        .WithMany("CarbonDioxideLevelRecords")
                        .HasForeignKey("TerrariumDataId");
                });

            modelBuilder.Entity("TerrariumApi.Models.HumidityLevelRecord", b =>
                {
                    b.HasOne("TerrariumApi.Models.TerrariumData", null)
                        .WithMany("HumidityLevelRecords")
                        .HasForeignKey("TerrariumDataId");
                });

            modelBuilder.Entity("TerrariumApi.Models.NaturalLightLevelRecord", b =>
                {
                    b.HasOne("TerrariumApi.Models.TerrariumData", null)
                        .WithMany("NaturalLightLevelRecords")
                        .HasForeignKey("TerrariumDataId");
                });

            modelBuilder.Entity("TerrariumApi.Models.Profile", b =>
                {
                    b.HasOne("TerrariumApi.Models.Terrarium", null)
                        .WithMany("Profiles")
                        .HasForeignKey("TerrariumId");
                });

            modelBuilder.Entity("TerrariumApi.Models.ScheduledTask", b =>
                {
                    b.HasOne("TerrariumApi.Models.Terrarium", null)
                        .WithMany("ScheduledTaskList")
                        .HasForeignKey("TerrariumId");
                });

            modelBuilder.Entity("TerrariumApi.Models.TemperatureRecord", b =>
                {
                    b.HasOne("TerrariumApi.Models.TerrariumData", null)
                        .WithMany("TemperatureRecords")
                        .HasForeignKey("TerrariumDataId");
                });

            modelBuilder.Entity("TerrariumApi.Models.Terrarium", b =>
                {
                    b.HasOne("TerrariumApi.Models.TerrariumData", "TerrariumData")
                        .WithMany()
                        .HasForeignKey("TerrariumDataId");

                    b.Navigation("TerrariumData");
                });

            modelBuilder.Entity("TerrariumApi.Models.User", b =>
                {
                    b.HasOne("TerrariumApi.Models.Terrarium", null)
                        .WithMany("Users")
                        .HasForeignKey("TerrariumId");
                });

            modelBuilder.Entity("TerrariumApi.Models.Terrarium", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("ScheduledTaskList");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TerrariumApi.Models.TerrariumData", b =>
                {
                    b.Navigation("CarbonDioxideLevelRecords");

                    b.Navigation("HumidityLevelRecords");

                    b.Navigation("NaturalLightLevelRecords");

                    b.Navigation("TemperatureRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
